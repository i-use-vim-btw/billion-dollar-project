# coding: utf-8

"""
    Gandi API

    API for Gandi Cloud vector database service

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.vectors_search_post_request_search_params import VectorsSearchPostRequestSearchParams
from typing import Optional, Set
from typing_extensions import Self

class VectorsSearchPostRequest(BaseModel):
    """
    VectorsSearchPostRequest
    """ # noqa: E501
    db_name: Optional[StrictStr] = Field(default=None, alias="dbName")
    collection_name: StrictStr = Field(alias="collectionName")
    partition_names: Optional[List[StrictStr]] = Field(default=None, alias="partitionNames")
    output_fields: Optional[List[StrictStr]] = Field(default=None, alias="outputFields")
    anss_field: Optional[StrictStr] = Field(default=None, alias="anssField")
    limit: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    filter: Optional[StrictStr] = None
    grouping_field: Optional[StrictStr] = Field(default=None, alias="groupingField")
    search_params: Optional[VectorsSearchPostRequestSearchParams] = Field(default=None, alias="searchParams")
    __properties: ClassVar[List[str]] = ["dbName", "collectionName", "partitionNames", "outputFields", "anssField", "limit", "offset", "filter", "groupingField", "searchParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VectorsSearchPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of search_params
        if self.search_params:
            _dict['searchParams'] = self.search_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VectorsSearchPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dbName": obj.get("dbName"),
            "collectionName": obj.get("collectionName"),
            "partitionNames": obj.get("partitionNames"),
            "outputFields": obj.get("outputFields"),
            "anssField": obj.get("anssField"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "filter": obj.get("filter"),
            "groupingField": obj.get("groupingField"),
            "searchParams": VectorsSearchPostRequestSearchParams.from_dict(obj["searchParams"]) if obj.get("searchParams") is not None else None
        })
        return _obj


