# coding: utf-8

"""
    Gandi API

    API for Gandi Cloud vector database service

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.collection_request import CollectionRequest

class TestCollectionRequest(unittest.TestCase):
    """CollectionRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CollectionRequest:
        """Test CollectionRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CollectionRequest`
        """
        model = CollectionRequest()
        if include_optional:
            return CollectionRequest(
                db_name = '',
                collection_name = '',
                dimension = 56,
                metric_type = '',
                id_type = '',
                auto_id = '',
                primary_field_name = '',
                vector_field_name = '',
                var_schema = openapi_client.models.collection_request_schema.CollectionRequest_schema(
                    auto_id = '', 
                    enable_dynamic_field = '', 
                    fields = [
                        openapi_client.models.collection_request_schema_fields_inner.CollectionRequest_schema_fields_inner(
                            field_name = '', 
                            data_type = '', 
                            element_data_type = '', 
                            is_primary = True, 
                            is_partition_key = True, 
                            element_type_params = openapi_client.models.collection_request_schema_fields_inner_element_type_params.CollectionRequest_schema_fields_inner_elementTypeParams(
                                max_length = 56, 
                                dim = 56, 
                                max_capacity = 56, ), )
                        ], ),
                index_params = [
                    openapi_client.models.index_request_index_params_inner.IndexRequest_indexParams_inner(
                        metric_type = '', 
                        field_name = '', 
                        index_name = '', 
                        params = openapi_client.models.index_request_index_params_inner_params.IndexRequest_indexParams_inner_params(
                            index_type = '', 
                            m = 56, 
                            ef_construction = 56, 
                            nlist = 56, ), )
                    ],
                params = openapi_client.models.collection_request_params.CollectionRequest_params(
                    max_length = 56, 
                    enable_dynamic_field = True, 
                    shards_num = 56, 
                    consistency_level = 56, 
                    partitions_num = 56, 
                    ttl_seconds = 56, )
            )
        else:
            return CollectionRequest(
                collection_name = '',
        )
        """

    def testCollectionRequest(self):
        """Test CollectionRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
