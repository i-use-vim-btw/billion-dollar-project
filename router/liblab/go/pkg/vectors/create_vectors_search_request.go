// This file was generated by liblab | https://liblab.com/

package vectors

type VectorsSearchRequest struct {
	DbName         *string       `json:"dbName,omitempty"`
	CollectionName *string       `json:"collectionName,omitempty" required:"true"`
	PartitionNames []string      `json:"partitionNames,omitempty"`
	OutputFields   []string      `json:"outputFields,omitempty"`
	AnssField      *string       `json:"anssField,omitempty"`
	Limit          *int64        `json:"limit,omitempty"`
	Offset         *int64        `json:"offset,omitempty"`
	Filter         *string       `json:"filter,omitempty"`
	GroupingField  *string       `json:"groupingField,omitempty"`
	SearchParams   *SearchParams `json:"searchParams,omitempty"`
}

func (c *VectorsSearchRequest) SetDbName(dbName string) {
	c.DbName = &dbName
}

func (c *VectorsSearchRequest) GetDbName() *string {
	if c == nil {
		return nil
	}
	return c.DbName
}

func (c *VectorsSearchRequest) SetCollectionName(collectionName string) {
	c.CollectionName = &collectionName
}

func (c *VectorsSearchRequest) GetCollectionName() *string {
	if c == nil {
		return nil
	}
	return c.CollectionName
}

func (c *VectorsSearchRequest) SetPartitionNames(partitionNames []string) {
	c.PartitionNames = partitionNames
}

func (c *VectorsSearchRequest) GetPartitionNames() []string {
	if c == nil {
		return nil
	}
	return c.PartitionNames
}

func (c *VectorsSearchRequest) SetOutputFields(outputFields []string) {
	c.OutputFields = outputFields
}

func (c *VectorsSearchRequest) GetOutputFields() []string {
	if c == nil {
		return nil
	}
	return c.OutputFields
}

func (c *VectorsSearchRequest) SetAnssField(anssField string) {
	c.AnssField = &anssField
}

func (c *VectorsSearchRequest) GetAnssField() *string {
	if c == nil {
		return nil
	}
	return c.AnssField
}

func (c *VectorsSearchRequest) SetLimit(limit int64) {
	c.Limit = &limit
}

func (c *VectorsSearchRequest) GetLimit() *int64 {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *VectorsSearchRequest) SetOffset(offset int64) {
	c.Offset = &offset
}

func (c *VectorsSearchRequest) GetOffset() *int64 {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *VectorsSearchRequest) SetFilter(filter string) {
	c.Filter = &filter
}

func (c *VectorsSearchRequest) GetFilter() *string {
	if c == nil {
		return nil
	}
	return c.Filter
}

func (c *VectorsSearchRequest) SetGroupingField(groupingField string) {
	c.GroupingField = &groupingField
}

func (c *VectorsSearchRequest) GetGroupingField() *string {
	if c == nil {
		return nil
	}
	return c.GroupingField
}

func (c *VectorsSearchRequest) SetSearchParams(searchParams SearchParams) {
	c.SearchParams = &searchParams
}

func (c *VectorsSearchRequest) GetSearchParams() *SearchParams {
	if c == nil {
		return nil
	}
	return c.SearchParams
}

type SearchParams struct {
	MetricType *string             `json:"metricType,omitempty"`
	Params     *SearchParamsParams `json:"params,omitempty"`
}

func (s *SearchParams) SetMetricType(metricType string) {
	s.MetricType = &metricType
}

func (s *SearchParams) GetMetricType() *string {
	if s == nil {
		return nil
	}
	return s.MetricType
}

func (s *SearchParams) SetParams(params SearchParamsParams) {
	s.Params = &params
}

func (s *SearchParams) GetParams() *SearchParamsParams {
	if s == nil {
		return nil
	}
	return s.Params
}

type SearchParamsParams struct {
	Radius      *int64 `json:"radius,omitempty"`
	RangeFilter *int64 `json:"range_filter,omitempty"`
}

func (s *SearchParamsParams) SetRadius(radius int64) {
	s.Radius = &radius
}

func (s *SearchParamsParams) GetRadius() *int64 {
	if s == nil {
		return nil
	}
	return s.Radius
}

func (s *SearchParamsParams) SetRangeFilter(rangeFilter int64) {
	s.RangeFilter = &rangeFilter
}

func (s *SearchParamsParams) GetRangeFilter() *int64 {
	if s == nil {
		return nil
	}
	return s.RangeFilter
}
