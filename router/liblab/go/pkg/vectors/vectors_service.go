// This file was generated by liblab | https://liblab.com/

package vectors

import (
	"context"
	restClient "github.com/swagger-api/swagger-petstore/internal/clients/rest"
	"github.com/swagger-api/swagger-petstore/internal/clients/rest/httptransport"
	"github.com/swagger-api/swagger-petstore/internal/configmanager"
	"github.com/swagger-api/swagger-petstore/pkg/gandiconfig"
	"github.com/swagger-api/swagger-petstore/pkg/shared"
)

type VectorsService struct {
	manager *configmanager.ConfigManager
}

func NewVectorsService(manager *configmanager.ConfigManager) *VectorsService {
	return &VectorsService{
		manager: manager,
	}
}

func (api *VectorsService) getConfig() *gandiconfig.Config {
	return api.manager.GetVectors()
}

func (api *VectorsService) SetBaseUrl(baseUrl string) {
	config := api.getConfig()
	config.SetBaseUrl(baseUrl)
}

func (api *VectorsService) SetAccessToken(accessToken string) {
	config := api.getConfig()
	config.SetAccessToken(accessToken)
}

// This operation deletes entities by their IDs or with a boolean expression.
func (api *VectorsService) CreateVectorsDelete(ctx context.Context, createVectorsDeleteRequest CreateVectorsDeleteRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/vectors/delete", config)

	request.Body = createVectorsDeleteRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// This operation gets vectors by their IDs.
func (api *VectorsService) CreateVectorsGet(ctx context.Context, createVectorsGetRequest CreateVectorsGetRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/vectors/get", config)

	request.Body = createVectorsGetRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// This operation inserts vectors into a specified collection.
func (api *VectorsService) CreateVectorsInsert(ctx context.Context, createVectorsInsertRequest CreateVectorsInsertRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/vectors/insert", config)

	request.Body = createVectorsInsertRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// This operation queries vectors in a specified collection.
func (api *VectorsService) CreateVectorsQuery(ctx context.Context, createVectorsQueryRequest CreateVectorsQueryRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/vectors/query", config)

	request.Body = createVectorsQueryRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// This operation searches vectors in a specified collection.
func (api *VectorsService) CreateVectorsSearch(ctx context.Context, createVectorsSearchRequest CreateVectorsSearchRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/vectors/search", config)

	request.Body = createVectorsSearchRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// This operation upserts vectors into a specified collection.
func (api *VectorsService) CreateVectorsUpsert(ctx context.Context, createVectorsUpsertRequest CreateVectorsUpsertRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/vectors/upsert", config)

	request.Body = createVectorsUpsertRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}
