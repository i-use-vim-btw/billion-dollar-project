// This file was generated by liblab | https://liblab.com/

package collections

type CollectionRequest struct {
	DbName           *string                        `json:"dbName,omitempty"`
	CollectionName   *string                        `json:"collectionName,omitempty" required:"true"`
	Dimension        *int64                         `json:"dimension,omitempty"`
	MetricType       *string                        `json:"metricType,omitempty"`
	IdType           *string                        `json:"idType,omitempty"`
	AutoId           *string                        `json:"autoID,omitempty"`
	PrimaryFieldName *string                        `json:"primaryFieldName,omitempty"`
	VectorFieldName  *string                        `json:"vectorFieldName,omitempty"`
	Schema           *Schema                        `json:"schema,omitempty"`
	IndexParams      []CollectionRequestIndexParams `json:"indexParams,omitempty"`
	Params           *CollectionRequestParams       `json:"params,omitempty"`
}

func (c *CollectionRequest) SetDbName(dbName string) {
	c.DbName = &dbName
}

func (c *CollectionRequest) GetDbName() *string {
	if c == nil {
		return nil
	}
	return c.DbName
}

func (c *CollectionRequest) SetCollectionName(collectionName string) {
	c.CollectionName = &collectionName
}

func (c *CollectionRequest) GetCollectionName() *string {
	if c == nil {
		return nil
	}
	return c.CollectionName
}

func (c *CollectionRequest) SetDimension(dimension int64) {
	c.Dimension = &dimension
}

func (c *CollectionRequest) GetDimension() *int64 {
	if c == nil {
		return nil
	}
	return c.Dimension
}

func (c *CollectionRequest) SetMetricType(metricType string) {
	c.MetricType = &metricType
}

func (c *CollectionRequest) GetMetricType() *string {
	if c == nil {
		return nil
	}
	return c.MetricType
}

func (c *CollectionRequest) SetIdType(idType string) {
	c.IdType = &idType
}

func (c *CollectionRequest) GetIdType() *string {
	if c == nil {
		return nil
	}
	return c.IdType
}

func (c *CollectionRequest) SetAutoId(autoId string) {
	c.AutoId = &autoId
}

func (c *CollectionRequest) GetAutoId() *string {
	if c == nil {
		return nil
	}
	return c.AutoId
}

func (c *CollectionRequest) SetPrimaryFieldName(primaryFieldName string) {
	c.PrimaryFieldName = &primaryFieldName
}

func (c *CollectionRequest) GetPrimaryFieldName() *string {
	if c == nil {
		return nil
	}
	return c.PrimaryFieldName
}

func (c *CollectionRequest) SetVectorFieldName(vectorFieldName string) {
	c.VectorFieldName = &vectorFieldName
}

func (c *CollectionRequest) GetVectorFieldName() *string {
	if c == nil {
		return nil
	}
	return c.VectorFieldName
}

func (c *CollectionRequest) SetSchema(schema Schema) {
	c.Schema = &schema
}

func (c *CollectionRequest) GetSchema() *Schema {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *CollectionRequest) SetIndexParams(indexParams []CollectionRequestIndexParams) {
	c.IndexParams = indexParams
}

func (c *CollectionRequest) GetIndexParams() []CollectionRequestIndexParams {
	if c == nil {
		return nil
	}
	return c.IndexParams
}

func (c *CollectionRequest) SetParams(params CollectionRequestParams) {
	c.Params = &params
}

func (c *CollectionRequest) GetParams() *CollectionRequestParams {
	if c == nil {
		return nil
	}
	return c.Params
}

type Schema struct {
	AutoId             *string  `json:"autoID,omitempty"`
	EnableDynamicField *string  `json:"enableDynamicField,omitempty"`
	Fields             []Fields `json:"fields,omitempty"`
}

func (s *Schema) SetAutoId(autoId string) {
	s.AutoId = &autoId
}

func (s *Schema) GetAutoId() *string {
	if s == nil {
		return nil
	}
	return s.AutoId
}

func (s *Schema) SetEnableDynamicField(enableDynamicField string) {
	s.EnableDynamicField = &enableDynamicField
}

func (s *Schema) GetEnableDynamicField() *string {
	if s == nil {
		return nil
	}
	return s.EnableDynamicField
}

func (s *Schema) SetFields(fields []Fields) {
	s.Fields = fields
}

func (s *Schema) GetFields() []Fields {
	if s == nil {
		return nil
	}
	return s.Fields
}

type Fields struct {
	FieldName         *string            `json:"fieldName,omitempty"`
	DataType          *string            `json:"dataType,omitempty"`
	ElementDataType   *string            `json:"elementDataType,omitempty"`
	IsPrimary         *bool              `json:"isPrimary,omitempty"`
	IsPartitionKey    *bool              `json:"isPartitionKey,omitempty"`
	ElementTypeParams *ElementTypeParams `json:"elementTypeParams,omitempty"`
}

func (f *Fields) SetFieldName(fieldName string) {
	f.FieldName = &fieldName
}

func (f *Fields) GetFieldName() *string {
	if f == nil {
		return nil
	}
	return f.FieldName
}

func (f *Fields) SetDataType(dataType string) {
	f.DataType = &dataType
}

func (f *Fields) GetDataType() *string {
	if f == nil {
		return nil
	}
	return f.DataType
}

func (f *Fields) SetElementDataType(elementDataType string) {
	f.ElementDataType = &elementDataType
}

func (f *Fields) GetElementDataType() *string {
	if f == nil {
		return nil
	}
	return f.ElementDataType
}

func (f *Fields) SetIsPrimary(isPrimary bool) {
	f.IsPrimary = &isPrimary
}

func (f *Fields) GetIsPrimary() *bool {
	if f == nil {
		return nil
	}
	return f.IsPrimary
}

func (f *Fields) SetIsPartitionKey(isPartitionKey bool) {
	f.IsPartitionKey = &isPartitionKey
}

func (f *Fields) GetIsPartitionKey() *bool {
	if f == nil {
		return nil
	}
	return f.IsPartitionKey
}

func (f *Fields) SetElementTypeParams(elementTypeParams ElementTypeParams) {
	f.ElementTypeParams = &elementTypeParams
}

func (f *Fields) GetElementTypeParams() *ElementTypeParams {
	if f == nil {
		return nil
	}
	return f.ElementTypeParams
}

type ElementTypeParams struct {
	MaxLength   *int64 `json:"max_length,omitempty"`
	Dim         *int64 `json:"dim,omitempty"`
	MaxCapacity *int64 `json:"max_capacity,omitempty"`
}

func (e *ElementTypeParams) SetMaxLength(maxLength int64) {
	e.MaxLength = &maxLength
}

func (e *ElementTypeParams) GetMaxLength() *int64 {
	if e == nil {
		return nil
	}
	return e.MaxLength
}

func (e *ElementTypeParams) SetDim(dim int64) {
	e.Dim = &dim
}

func (e *ElementTypeParams) GetDim() *int64 {
	if e == nil {
		return nil
	}
	return e.Dim
}

func (e *ElementTypeParams) SetMaxCapacity(maxCapacity int64) {
	e.MaxCapacity = &maxCapacity
}

func (e *ElementTypeParams) GetMaxCapacity() *int64 {
	if e == nil {
		return nil
	}
	return e.MaxCapacity
}

type CollectionRequestIndexParams struct {
	MetricType *string             `json:"metricType,omitempty"`
	FieldName  *string             `json:"fieldName,omitempty"`
	IndexName  *string             `json:"indexName,omitempty"`
	Params     *IndexParamsParams1 `json:"params,omitempty"`
}

func (c *CollectionRequestIndexParams) SetMetricType(metricType string) {
	c.MetricType = &metricType
}

func (c *CollectionRequestIndexParams) GetMetricType() *string {
	if c == nil {
		return nil
	}
	return c.MetricType
}

func (c *CollectionRequestIndexParams) SetFieldName(fieldName string) {
	c.FieldName = &fieldName
}

func (c *CollectionRequestIndexParams) GetFieldName() *string {
	if c == nil {
		return nil
	}
	return c.FieldName
}

func (c *CollectionRequestIndexParams) SetIndexName(indexName string) {
	c.IndexName = &indexName
}

func (c *CollectionRequestIndexParams) GetIndexName() *string {
	if c == nil {
		return nil
	}
	return c.IndexName
}

func (c *CollectionRequestIndexParams) SetParams(params IndexParamsParams1) {
	c.Params = &params
}

func (c *CollectionRequestIndexParams) GetParams() *IndexParamsParams1 {
	if c == nil {
		return nil
	}
	return c.Params
}

type IndexParamsParams1 struct {
	IndexType      *string `json:"index_type,omitempty"`
	M              *int64  `json:"M,omitempty"`
	EfConstruction *int64  `json:"efConstruction,omitempty"`
	Nlist          *int64  `json:"nlist,omitempty"`
}

func (i *IndexParamsParams1) SetIndexType(indexType string) {
	i.IndexType = &indexType
}

func (i *IndexParamsParams1) GetIndexType() *string {
	if i == nil {
		return nil
	}
	return i.IndexType
}

func (i *IndexParamsParams1) SetM(m int64) {
	i.M = &m
}

func (i *IndexParamsParams1) GetM() *int64 {
	if i == nil {
		return nil
	}
	return i.M
}

func (i *IndexParamsParams1) SetEfConstruction(efConstruction int64) {
	i.EfConstruction = &efConstruction
}

func (i *IndexParamsParams1) GetEfConstruction() *int64 {
	if i == nil {
		return nil
	}
	return i.EfConstruction
}

func (i *IndexParamsParams1) SetNlist(nlist int64) {
	i.Nlist = &nlist
}

func (i *IndexParamsParams1) GetNlist() *int64 {
	if i == nil {
		return nil
	}
	return i.Nlist
}

type CollectionRequestParams struct {
	MaxLength          *int64 `json:"max_length,omitempty"`
	EnableDynamicField *bool  `json:"enableDynamicField,omitempty"`
	ShardsNum          *int64 `json:"shardsNum,omitempty"`
	ConsistencyLevel   *int64 `json:"consistencyLevel,omitempty"`
	PartitionsNum      *int64 `json:"partitionsNum,omitempty"`
	TtlSeconds         *int64 `json:"ttlSeconds,omitempty"`
}

func (c *CollectionRequestParams) SetMaxLength(maxLength int64) {
	c.MaxLength = &maxLength
}

func (c *CollectionRequestParams) GetMaxLength() *int64 {
	if c == nil {
		return nil
	}
	return c.MaxLength
}

func (c *CollectionRequestParams) SetEnableDynamicField(enableDynamicField bool) {
	c.EnableDynamicField = &enableDynamicField
}

func (c *CollectionRequestParams) GetEnableDynamicField() *bool {
	if c == nil {
		return nil
	}
	return c.EnableDynamicField
}

func (c *CollectionRequestParams) SetShardsNum(shardsNum int64) {
	c.ShardsNum = &shardsNum
}

func (c *CollectionRequestParams) GetShardsNum() *int64 {
	if c == nil {
		return nil
	}
	return c.ShardsNum
}

func (c *CollectionRequestParams) SetConsistencyLevel(consistencyLevel int64) {
	c.ConsistencyLevel = &consistencyLevel
}

func (c *CollectionRequestParams) GetConsistencyLevel() *int64 {
	if c == nil {
		return nil
	}
	return c.ConsistencyLevel
}

func (c *CollectionRequestParams) SetPartitionsNum(partitionsNum int64) {
	c.PartitionsNum = &partitionsNum
}

func (c *CollectionRequestParams) GetPartitionsNum() *int64 {
	if c == nil {
		return nil
	}
	return c.PartitionsNum
}

func (c *CollectionRequestParams) SetTtlSeconds(ttlSeconds int64) {
	c.TtlSeconds = &ttlSeconds
}

func (c *CollectionRequestParams) GetTtlSeconds() *int64 {
	if c == nil {
		return nil
	}
	return c.TtlSeconds
}
