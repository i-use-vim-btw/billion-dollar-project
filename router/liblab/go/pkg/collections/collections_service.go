// This file was generated by liblab | https://liblab.com/

package collections

import (
	"context"

	restClient "github.com/swagger-api/swagger-petstore/internal/clients/rest"
	"github.com/swagger-api/swagger-petstore/internal/clients/rest/httptransport"
	"github.com/swagger-api/swagger-petstore/internal/configmanager"
	"github.com/swagger-api/swagger-petstore/pkg/gandiconfig"
	"github.com/swagger-api/swagger-petstore/pkg/shared"
)

type CollectionsService struct {
	manager *configmanager.ConfigManager
}

func NewCollectionsService(manager *configmanager.ConfigManager) *CollectionsService {
	return &CollectionsService{
		manager: manager,
	}
}

func (api *CollectionsService) getConfig() *gandiconfig.Config {
	return api.manager.GetCollections()
}

func (api *CollectionsService) SetBaseUrl(baseUrl string) {
	config := api.getConfig()
	config.SetBaseUrl(baseUrl)
}

func (api *CollectionsService) SetAccessToken(accessToken string) {
	config := api.getConfig()
	config.SetAccessToken(accessToken)
}

// This operation creates a collection in a specified cluster.
func (api *CollectionsService) CollectionCreate(ctx context.Context, Collection Collection) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/create", config)

	request.Body = Collection

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// Returns the details of a collection.
func (api *CollectionsService) CollectionDescribe(ctx context.Context, createCollectionsDescribeRequest CollectionDescribeRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/describe", config)

	request.Body = createCollectionsDescribeRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// This operation drops the current collection and all data within the collection.
func (api *CollectionsService) CollectionDrop(ctx context.Context, createCollectionsDropRequest CollectionDropRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/drop", config)

	request.Body = createCollectionsDropRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// Returns the load state of a specific collection.
func (api *CollectionsService) CollectionGetLoadState(ctx context.Context, createCollectionsGetLoadStateRequest CollectionGetLoadStateRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/get_load_state", config)

	request.Body = createCollectionsGetLoadStateRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// This operation gets the number of entities in a collection.
func (api *CollectionsService) CollectionGetStats(ctx context.Context, createCollectionsGetStatsRequest CollectionGetStatsRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/get_stats", config)

	request.Body = createCollectionsGetStatsRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// Checks if a collection exists in the database.
func (api *CollectionsService) CollectionHas(ctx context.Context, createCollectionsHasRequest CollectionHasRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/has", config)

	request.Body = createCollectionsHasRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// Returns a list of all collections in the specified database.
func (api *CollectionsService) CollectionList(ctx context.Context, createCollectionsListRequest CollectionListRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/list", config)

	request.Body = createCollectionsListRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// Loads a collection into memory.
func (api *CollectionsService) CollectionLoad(ctx context.Context, createCollectionsLoadRequest CollectionLoadRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/load", config)

	request.Body = createCollectionsLoadRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// Releases a collection from memory.
func (api *CollectionsService) CollectionRelease(ctx context.Context, createCollectionsReleaseRequest CollectionReleaseRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/release", config)

	request.Body = createCollectionsReleaseRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}

// This operation renames an existing collection and optionally moves the collection to a new database.
func (api *CollectionsService) CollectionRename(ctx context.Context, createCollectionsRenameRequest CollectionRenameRequest) (*shared.GandiResponse[any], *shared.GandiError) {
	config := *api.getConfig()

	client := restClient.NewRestClient[any](config)

	request := httptransport.NewRequest(ctx, "POST", "/collections/rename", config)

	request.Body = createCollectionsRenameRequest

	resp, err := client.Call(request)
	if err != nil {
		return nil, shared.NewGandiError[any](err)
	}

	return shared.NewGandiResponse[any](resp), nil
}
