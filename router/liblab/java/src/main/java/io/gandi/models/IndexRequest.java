// This file was generated by liblab | https://liblab.com/

package io.gandi.models;

@lombok.Getter
@lombok.EqualsAndHashCode(callSuper = false)
@lombok.ToString
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.databind.annotation.JsonDeserialize(builder = IndexRequest.Builder.class)
public class IndexRequest extends io.gandi.models.BaseModel {

  @lombok.Getter
  @lombok.EqualsAndHashCode(callSuper = false)
  @lombok.ToString
  @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
  @com.fasterxml.jackson.databind.annotation.JsonDeserialize(builder = IndexRequest.IndexParams.Builder.class)
  public static class IndexParams extends io.gandi.models.BaseModel {

    @lombok.Getter
    @lombok.EqualsAndHashCode(callSuper = false)
    @lombok.ToString
    @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
    @com.fasterxml.jackson.databind.annotation.JsonDeserialize(builder = IndexRequest.IndexParams.Params.Builder.class)
    public static class Params extends io.gandi.models.BaseModel {

      @lombok.Getter
      @lombok.Setter
      @lombok.experimental.Accessors(chain = true)
      @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
        buildMethodName = "buildWithoutValidation",
        withPrefix = "set"
      )
      public static class Builder extends io.gandi.models.BaseModel.Builder {

        static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

        static {
          java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {};

          REQUIRED_FIELDS_GROUPS =
            java.util.Arrays
              .stream(requiredFieldsGroups)
              .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
              .collect(java.util.stream.Collectors.toSet());
        }

        @com.fasterxml.jackson.annotation.JsonProperty("efConstruction")
        private java.lang.Long efConstruction;

        @com.fasterxml.jackson.annotation.JsonProperty("index_type")
        private java.lang.String indexType;

        @com.fasterxml.jackson.annotation.JsonProperty("M")
        private java.lang.Long m;

        @com.fasterxml.jackson.annotation.JsonProperty("nlist")
        private java.lang.Long nlist;

        public Builder() {
          super(ValidationType.ALL_OF);
        }

        protected Builder(BaseModel.Builder.ValidationType validationType) {
          super(validationType);
        }

        public IndexRequest.IndexParams.Params build() {
          String validateMsg = validate();

          if (validateMsg != null) {
            throw new io.gandi.exceptions.ApiException(validateMsg);
          }

          return buildWithoutValidation();
        }

        public IndexRequest.IndexParams.Params buildWithoutValidation() {
          return new IndexRequest.IndexParams.Params(this);
        }

        @Override
        protected java.util.Set<String> getNonNullInstanceFieldNames() {
          // Introspect the class to get a list of all declared fields.
          return java.util.Arrays
            .asList(this.getClass().getDeclaredFields())
            .stream()
            .filter(field -> {
              try {
                // Filter fields that are non-static and have values that are not null.
                return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
              } catch (IllegalArgumentException | IllegalAccessException e) {
                // This should never happen...

                throw new io.gandi.exceptions.ApiException(
                  "Unexpected exception thrown while accessing instance fields.",
                  e
                );
              }
            })
            .map(java.lang.reflect.Field::getName)
            .collect(java.util.stream.Collectors.toSet());
        }

        @Override
        protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
          return REQUIRED_FIELDS_GROUPS;
        }
      }

      @com.fasterxml.jackson.annotation.JsonProperty("efConstruction")
      private final java.lang.Long efConstruction;

      @com.fasterxml.jackson.annotation.JsonProperty("index_type")
      private final java.lang.String indexType;

      @com.fasterxml.jackson.annotation.JsonProperty("M")
      private final java.lang.Long m;

      @com.fasterxml.jackson.annotation.JsonProperty("nlist")
      private final java.lang.Long nlist;

      Params(Builder builder) {
        super(builder);
        this.efConstruction = builder.getEfConstruction();
        this.indexType = builder.getIndexType();
        this.m = builder.getM();
        this.nlist = builder.getNlist();
      }
    }

    @lombok.Getter
    @lombok.Setter
    @lombok.experimental.Accessors(chain = true)
    @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
      buildMethodName = "buildWithoutValidation",
      withPrefix = "set"
    )
    public static class Builder extends io.gandi.models.BaseModel.Builder {

      static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

      static {
        java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {};

        REQUIRED_FIELDS_GROUPS =
          java.util.Arrays
            .stream(requiredFieldsGroups)
            .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
            .collect(java.util.stream.Collectors.toSet());
      }

      @com.fasterxml.jackson.annotation.JsonProperty("fieldName")
      private java.lang.String fieldName;

      @com.fasterxml.jackson.annotation.JsonProperty("indexName")
      private java.lang.String indexName;

      @com.fasterxml.jackson.annotation.JsonProperty("metricType")
      private java.lang.String metricType;

      @com.fasterxml.jackson.annotation.JsonProperty("params")
      private IndexRequest.IndexParams.Params params;

      public Builder() {
        super(ValidationType.ALL_OF);
      }

      protected Builder(BaseModel.Builder.ValidationType validationType) {
        super(validationType);
      }

      public IndexRequest.IndexParams build() {
        String validateMsg = validate();

        if (validateMsg != null) {
          throw new io.gandi.exceptions.ApiException(validateMsg);
        }

        return buildWithoutValidation();
      }

      public IndexRequest.IndexParams buildWithoutValidation() {
        return new IndexRequest.IndexParams(this);
      }

      @Override
      protected java.util.Set<String> getNonNullInstanceFieldNames() {
        // Introspect the class to get a list of all declared fields.
        return java.util.Arrays
          .asList(this.getClass().getDeclaredFields())
          .stream()
          .filter(field -> {
            try {
              // Filter fields that are non-static and have values that are not null.
              return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
            } catch (IllegalArgumentException | IllegalAccessException e) {
              // This should never happen...

              throw new io.gandi.exceptions.ApiException(
                "Unexpected exception thrown while accessing instance fields.",
                e
              );
            }
          })
          .map(java.lang.reflect.Field::getName)
          .collect(java.util.stream.Collectors.toSet());
      }

      @Override
      protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
        return REQUIRED_FIELDS_GROUPS;
      }
    }

    @com.fasterxml.jackson.annotation.JsonProperty("fieldName")
    private final java.lang.String fieldName;

    @com.fasterxml.jackson.annotation.JsonProperty("indexName")
    private final java.lang.String indexName;

    @com.fasterxml.jackson.annotation.JsonProperty("metricType")
    private final java.lang.String metricType;

    @com.fasterxml.jackson.annotation.JsonProperty("params")
    private final IndexRequest.IndexParams.Params params;

    IndexParams(Builder builder) {
      super(builder);
      this.fieldName = builder.getFieldName();
      this.indexName = builder.getIndexName();
      this.metricType = builder.getMetricType();
      this.params = builder.getParams();
    }
  }

  @lombok.Getter
  @lombok.Setter
  @lombok.experimental.Accessors(chain = true)
  @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
    buildMethodName = "buildWithoutValidation",
    withPrefix = "set"
  )
  public static class Builder extends io.gandi.models.BaseModel.Builder {

    static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

    static {
      java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {
        new java.lang.String[] { "collectionName" },
      };

      REQUIRED_FIELDS_GROUPS =
        java.util.Arrays
          .stream(requiredFieldsGroups)
          .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
          .collect(java.util.stream.Collectors.toSet());
    }

    @com.fasterxml.jackson.annotation.JsonProperty("collectionName")
    private java.lang.String collectionName;

    @com.fasterxml.jackson.annotation.JsonProperty("dbName")
    private java.lang.String dbName;

    @com.fasterxml.jackson.annotation.JsonProperty("indexParams")
    private java.util.List<IndexRequest.IndexParams> indexParams;

    public Builder() {
      super(ValidationType.ALL_OF);
    }

    protected Builder(BaseModel.Builder.ValidationType validationType) {
      super(validationType);
    }

    public IndexRequest build() {
      String validateMsg = validate();

      if (validateMsg != null) {
        throw new io.gandi.exceptions.ApiException(validateMsg);
      }

      return buildWithoutValidation();
    }

    public IndexRequest buildWithoutValidation() {
      return new IndexRequest(this);
    }

    @Override
    protected java.util.Set<String> getNonNullInstanceFieldNames() {
      // Introspect the class to get a list of all declared fields.
      return java.util.Arrays
        .stream(this.getClass().getDeclaredFields())
        .filter(field -> {
          try {
            // Filter fields that are non-static and have values that are not null.
            return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
          } catch (IllegalArgumentException | IllegalAccessException e) {
            // This should never happen...

            throw new io.gandi.exceptions.ApiException(
              "Unexpected exception thrown while accessing instance fields.",
              e
            );
          }
        })
        .map(java.lang.reflect.Field::getName)
        .collect(java.util.stream.Collectors.toSet());
    }

    @Override
    protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
      return REQUIRED_FIELDS_GROUPS;
    }
  }

  @com.fasterxml.jackson.annotation.JsonProperty("collectionName")
  private final java.lang.String collectionName;

  @com.fasterxml.jackson.annotation.JsonProperty("dbName")
  private final java.lang.String dbName;

  @com.fasterxml.jackson.annotation.JsonProperty("indexParams")
  private final java.util.List<IndexRequest.IndexParams> indexParams;

  IndexRequest(Builder builder) {
    super(builder);
    this.collectionName = builder.getCollectionName();
    this.dbName = builder.getDbName();
    this.indexParams = builder.getIndexParams();
  }
}
