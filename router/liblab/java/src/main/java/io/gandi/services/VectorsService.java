// This file was generated by liblab | https://liblab.com/

package io.gandi.services;

import io.gandi.exceptions.ApiException;
import io.gandi.http.*;
import io.gandi.http.util.HttpHeaders;
import io.gandi.http.util.HttpUrl;
import io.gandi.models.BaseModel;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import okhttp3.Headers;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class VectorsService extends BaseService implements VectorsClient {

  public VectorsService(OkHttpClient httpClient, String serverUrl) {
    super(httpClient, serverUrl);
  }

  /**
   * @summary Delete vectors
   */
  public String create15(io.gandi.models.Create15Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("vectors").addPathParameter("delete").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Get vectors
   */
  public String create16(io.gandi.models.Create16Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("vectors").addPathParameter("get").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Insert vectors
   */
  public String create17(io.gandi.models.Create17Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("vectors").addPathParameter("insert").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Query vectors
   */
  public String create18(io.gandi.models.Create18Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("vectors").addPathParameter("query").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Search vectors
   */
  public String create19(io.gandi.models.Create19Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("vectors").addPathParameter("search").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Upsert vectors
   */
  public String create20(io.gandi.models.Create20Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("vectors").addPathParameter("upsert").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }
}
