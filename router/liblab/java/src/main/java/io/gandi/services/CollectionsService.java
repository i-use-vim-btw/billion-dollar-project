// This file was generated by liblab | https://liblab.com/

package io.gandi.services;

import io.gandi.exceptions.ApiException;
import io.gandi.http.*;
import io.gandi.http.util.HttpHeaders;
import io.gandi.http.util.HttpUrl;
import io.gandi.models.BaseModel;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import okhttp3.Headers;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class CollectionsService extends BaseService implements CollectionsClient {

  public CollectionsService(OkHttpClient httpClient, String serverUrl) {
    super(httpClient, serverUrl);
  }

  /**
   * @summary Create a new collection
   */
  public String create(io.gandi.models.Collection input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("collections").addPathParameter("create").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Describe a collection
   */
  public String create2(io.gandi.models.Create2Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("collections").addPathParameter("describe").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Drop a collection
   */
  public String create3(io.gandi.models.Create3Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("collections").addPathParameter("drop").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Get the load state of a collection
   */
  public String create4(io.gandi.models.Create4Request input) throws ApiException {
    String url = HttpUrl
      .builder(this.serverUrl)
      .addPathParameter("collections")
      .addPathParameter("get_load_state")
      .build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Get the stats of a collection
   */
  public String create5(io.gandi.models.Create5Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("collections").addPathParameter("get_stats").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Check if a collection exists
   */
  public String create6(io.gandi.models.Create6Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("collections").addPathParameter("has").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary List all collections
   */
  public String create7(io.gandi.models.Create7Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("collections").addPathParameter("list").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Load a collection
   */
  public String create8(io.gandi.models.Create8Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("collections").addPathParameter("load").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Release a collection
   */
  public String create9(io.gandi.models.Create9Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("collections").addPathParameter("release").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @summary Rename a collection
   */
  public String create10(io.gandi.models.Create10Request input) throws ApiException {
    String url = HttpUrl.builder(this.serverUrl).addPathParameter("collections").addPathParameter("rename").build();
    RequestBody requestBody = RequestBody.create(
      Objects.requireNonNull(ModelConverter.modelToJson(input)),
      okhttp3.MediaType.parse("application/json; charset=utf-8")
    );
    Request request = new Request.Builder().url(url).post(requestBody).build();
    Response response = this.execute(request);

    try {
      return response.body().string();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }
}
