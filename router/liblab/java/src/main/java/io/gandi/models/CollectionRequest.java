// This file was generated by liblab | https://liblab.com/

package io.gandi.models;

@lombok.Getter
@lombok.EqualsAndHashCode(callSuper = false)
@lombok.ToString
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.databind.annotation.JsonDeserialize(builder = Collection.Builder.class)
public class Collection extends io.gandi.models.BaseModel {

  @lombok.Getter
  @lombok.EqualsAndHashCode(callSuper = false)
  @lombok.ToString
  @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
  @com.fasterxml.jackson.databind.annotation.JsonDeserialize(builder = Collection.Schema.Builder.class)
  public static class Schema extends io.gandi.models.BaseModel {

    @lombok.Getter
    @lombok.EqualsAndHashCode(callSuper = false)
    @lombok.ToString
    @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
    @com.fasterxml.jackson.databind.annotation.JsonDeserialize(builder = Collection.Schema.Fields.Builder.class)
    public static class Fields extends io.gandi.models.BaseModel {

      @lombok.Getter
      @lombok.EqualsAndHashCode(callSuper = false)
      @lombok.ToString
      @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
      @com.fasterxml.jackson.databind.annotation.JsonDeserialize(
        builder = Collection.Schema.Fields.ElementTypeParams.Builder.class
      )
      public static class ElementTypeParams extends io.gandi.models.BaseModel {

        @lombok.Getter
        @lombok.Setter
        @lombok.experimental.Accessors(chain = true)
        @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
          buildMethodName = "buildWithoutValidation",
          withPrefix = "set"
        )
        public static class Builder extends io.gandi.models.BaseModel.Builder {

          static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

          static {
            java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {};

            REQUIRED_FIELDS_GROUPS =
              java.util.Arrays
                .stream(requiredFieldsGroups)
                .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
                .collect(java.util.stream.Collectors.toSet());
          }

          @com.fasterxml.jackson.annotation.JsonProperty("dim")
          private java.lang.Long dim;

          @com.fasterxml.jackson.annotation.JsonProperty("max_capacity")
          private java.lang.Long maxCapacity;

          @com.fasterxml.jackson.annotation.JsonProperty("max_length")
          private java.lang.Long maxLength;

          public Builder() {
            super(ValidationType.ALL_OF);
          }

          protected Builder(BaseModel.Builder.ValidationType validationType) {
            super(validationType);
          }

          public Collection.Schema.Fields.ElementTypeParams build() {
            String validateMsg = validate();

            if (validateMsg != null) {
              throw new io.gandi.exceptions.ApiException(validateMsg);
            }

            return buildWithoutValidation();
          }

          public Collection.Schema.Fields.ElementTypeParams buildWithoutValidation() {
            return new Collection.Schema.Fields.ElementTypeParams(this);
          }

          @Override
          protected java.util.Set<String> getNonNullInstanceFieldNames() {
            // Introspect the class to get a list of all declared fields.
            return java.util.Arrays
              .asList(this.getClass().getDeclaredFields())
              .stream()
              .filter(field -> {
                try {
                  // Filter fields that are non-static and have values that are not null.
                  return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
                } catch (IllegalArgumentException | IllegalAccessException e) {
                  // This should never happen...

                  throw new io.gandi.exceptions.ApiException(
                    "Unexpected exception thrown while accessing instance fields.",
                    e
                  );
                }
              })
              .map(java.lang.reflect.Field::getName)
              .collect(java.util.stream.Collectors.toSet());
          }

          @Override
          protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
            return REQUIRED_FIELDS_GROUPS;
          }
        }

        @com.fasterxml.jackson.annotation.JsonProperty("dim")
        private final java.lang.Long dim;

        @com.fasterxml.jackson.annotation.JsonProperty("max_capacity")
        private final java.lang.Long maxCapacity;

        @com.fasterxml.jackson.annotation.JsonProperty("max_length")
        private final java.lang.Long maxLength;

        ElementTypeParams(Builder builder) {
          super(builder);
          this.dim = builder.getDim();
          this.maxCapacity = builder.getMaxCapacity();
          this.maxLength = builder.getMaxLength();
        }
      }

      @lombok.Getter
      @lombok.Setter
      @lombok.experimental.Accessors(chain = true)
      @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
        buildMethodName = "buildWithoutValidation",
        withPrefix = "set"
      )
      public static class Builder extends io.gandi.models.BaseModel.Builder {

        static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

        static {
          java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {};

          REQUIRED_FIELDS_GROUPS =
            java.util.Arrays
              .stream(requiredFieldsGroups)
              .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
              .collect(java.util.stream.Collectors.toSet());
        }

        @com.fasterxml.jackson.annotation.JsonProperty("dataType")
        private java.lang.String dataType;

        @com.fasterxml.jackson.annotation.JsonProperty("elementDataType")
        private java.lang.String elementDataType;

        @com.fasterxml.jackson.annotation.JsonProperty("elementTypeParams")
        private Collection.Schema.Fields.ElementTypeParams elementTypeParams;

        @com.fasterxml.jackson.annotation.JsonProperty("fieldName")
        private java.lang.String fieldName;

        @com.fasterxml.jackson.annotation.JsonProperty("isPartitionKey")
        private java.lang.Boolean isPartitionKey;

        @com.fasterxml.jackson.annotation.JsonProperty("isPrimary")
        private java.lang.Boolean isPrimary;

        public Builder() {
          super(ValidationType.ALL_OF);
        }

        protected Builder(BaseModel.Builder.ValidationType validationType) {
          super(validationType);
        }

        public Collection.Schema.Fields build() {
          String validateMsg = validate();

          if (validateMsg != null) {
            throw new io.gandi.exceptions.ApiException(validateMsg);
          }

          return buildWithoutValidation();
        }

        public Collection.Schema.Fields buildWithoutValidation() {
          return new Collection.Schema.Fields(this);
        }

        @Override
        protected java.util.Set<String> getNonNullInstanceFieldNames() {
          // Introspect the class to get a list of all declared fields.
          return java.util.Arrays
            .asList(this.getClass().getDeclaredFields())
            .stream()
            .filter(field -> {
              try {
                // Filter fields that are non-static and have values that are not null.
                return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
              } catch (IllegalArgumentException | IllegalAccessException e) {
                // This should never happen...

                throw new io.gandi.exceptions.ApiException(
                  "Unexpected exception thrown while accessing instance fields.",
                  e
                );
              }
            })
            .map(java.lang.reflect.Field::getName)
            .collect(java.util.stream.Collectors.toSet());
        }

        @Override
        protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
          return REQUIRED_FIELDS_GROUPS;
        }
      }

      @com.fasterxml.jackson.annotation.JsonProperty("dataType")
      private final java.lang.String dataType;

      @com.fasterxml.jackson.annotation.JsonProperty("elementDataType")
      private final java.lang.String elementDataType;

      @com.fasterxml.jackson.annotation.JsonProperty("elementTypeParams")
      private final Collection.Schema.Fields.ElementTypeParams elementTypeParams;

      @com.fasterxml.jackson.annotation.JsonProperty("fieldName")
      private final java.lang.String fieldName;

      @com.fasterxml.jackson.annotation.JsonProperty("isPartitionKey")
      private final java.lang.Boolean isPartitionKey;

      @com.fasterxml.jackson.annotation.JsonProperty("isPrimary")
      private final java.lang.Boolean isPrimary;

      Fields(Builder builder) {
        super(builder);
        this.dataType = builder.getDataType();
        this.elementDataType = builder.getElementDataType();
        this.elementTypeParams = builder.getElementTypeParams();
        this.fieldName = builder.getFieldName();
        this.isPartitionKey = builder.getIsPartitionKey();
        this.isPrimary = builder.getIsPrimary();
      }
    }

    @lombok.Getter
    @lombok.Setter
    @lombok.experimental.Accessors(chain = true)
    @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
      buildMethodName = "buildWithoutValidation",
      withPrefix = "set"
    )
    public static class Builder extends io.gandi.models.BaseModel.Builder {

      static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

      static {
        java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {};

        REQUIRED_FIELDS_GROUPS =
          java.util.Arrays
            .stream(requiredFieldsGroups)
            .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
            .collect(java.util.stream.Collectors.toSet());
      }

      @com.fasterxml.jackson.annotation.JsonProperty("autoID")
      private java.lang.String autoId;

      @com.fasterxml.jackson.annotation.JsonProperty("enableDynamicField")
      private java.lang.String enableDynamicField;

      @com.fasterxml.jackson.annotation.JsonProperty("fields")
      private java.util.List<Collection.Schema.Fields> fields;

      public Builder() {
        super(ValidationType.ALL_OF);
      }

      protected Builder(BaseModel.Builder.ValidationType validationType) {
        super(validationType);
      }

      public Collection.Schema build() {
        String validateMsg = validate();

        if (validateMsg != null) {
          throw new io.gandi.exceptions.ApiException(validateMsg);
        }

        return buildWithoutValidation();
      }

      public Collection.Schema buildWithoutValidation() {
        return new Collection.Schema(this);
      }

      @Override
      protected java.util.Set<String> getNonNullInstanceFieldNames() {
        // Introspect the class to get a list of all declared fields.
        return java.util.Arrays
          .asList(this.getClass().getDeclaredFields())
          .stream()
          .filter(field -> {
            try {
              // Filter fields that are non-static and have values that are not null.
              return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
            } catch (IllegalArgumentException | IllegalAccessException e) {
              // This should never happen...

              throw new io.gandi.exceptions.ApiException(
                "Unexpected exception thrown while accessing instance fields.",
                e
              );
            }
          })
          .map(java.lang.reflect.Field::getName)
          .collect(java.util.stream.Collectors.toSet());
      }

      @Override
      protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
        return REQUIRED_FIELDS_GROUPS;
      }
    }

    @com.fasterxml.jackson.annotation.JsonProperty("autoID")
    private final java.lang.String autoId;

    @com.fasterxml.jackson.annotation.JsonProperty("enableDynamicField")
    private final java.lang.String enableDynamicField;

    @com.fasterxml.jackson.annotation.JsonProperty("fields")
    private final java.util.List<Collection.Schema.Fields> fields;

    Schema(Builder builder) {
      super(builder);
      this.autoId = builder.getAutoId();
      this.enableDynamicField = builder.getEnableDynamicField();
      this.fields = builder.getFields();
    }
  }

  @lombok.Getter
  @lombok.EqualsAndHashCode(callSuper = false)
  @lombok.ToString
  @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
  @com.fasterxml.jackson.databind.annotation.JsonDeserialize(builder = Collection.IndexParams.Builder.class)
  public static class IndexParams extends io.gandi.models.BaseModel {

    @lombok.Getter
    @lombok.EqualsAndHashCode(callSuper = false)
    @lombok.ToString
    @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
    @com.fasterxml.jackson.databind.annotation.JsonDeserialize(
      builder = Collection.IndexParams.Params.Builder.class
    )
    public static class Params extends io.gandi.models.BaseModel {

      @lombok.Getter
      @lombok.Setter
      @lombok.experimental.Accessors(chain = true)
      @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
        buildMethodName = "buildWithoutValidation",
        withPrefix = "set"
      )
      public static class Builder extends io.gandi.models.BaseModel.Builder {

        static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

        static {
          java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {};

          REQUIRED_FIELDS_GROUPS =
            java.util.Arrays
              .stream(requiredFieldsGroups)
              .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
              .collect(java.util.stream.Collectors.toSet());
        }

        @com.fasterxml.jackson.annotation.JsonProperty("efConstruction")
        private java.lang.Long efConstruction;

        @com.fasterxml.jackson.annotation.JsonProperty("index_type")
        private java.lang.String indexType;

        @com.fasterxml.jackson.annotation.JsonProperty("M")
        private java.lang.Long m;

        @com.fasterxml.jackson.annotation.JsonProperty("nlist")
        private java.lang.Long nlist;

        public Builder() {
          super(ValidationType.ALL_OF);
        }

        protected Builder(BaseModel.Builder.ValidationType validationType) {
          super(validationType);
        }

        public Collection.IndexParams.Params build() {
          String validateMsg = validate();

          if (validateMsg != null) {
            throw new io.gandi.exceptions.ApiException(validateMsg);
          }

          return buildWithoutValidation();
        }

        public Collection.IndexParams.Params buildWithoutValidation() {
          return new Collection.IndexParams.Params(this);
        }

        @Override
        protected java.util.Set<String> getNonNullInstanceFieldNames() {
          // Introspect the class to get a list of all declared fields.
          return java.util.Arrays
            .asList(this.getClass().getDeclaredFields())
            .stream()
            .filter(field -> {
              try {
                // Filter fields that are non-static and have values that are not null.
                return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
              } catch (IllegalArgumentException | IllegalAccessException e) {
                // This should never happen...

                throw new io.gandi.exceptions.ApiException(
                  "Unexpected exception thrown while accessing instance fields.",
                  e
                );
              }
            })
            .map(java.lang.reflect.Field::getName)
            .collect(java.util.stream.Collectors.toSet());
        }

        @Override
        protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
          return REQUIRED_FIELDS_GROUPS;
        }
      }

      @com.fasterxml.jackson.annotation.JsonProperty("efConstruction")
      private final java.lang.Long efConstruction;

      @com.fasterxml.jackson.annotation.JsonProperty("index_type")
      private final java.lang.String indexType;

      @com.fasterxml.jackson.annotation.JsonProperty("M")
      private final java.lang.Long m;

      @com.fasterxml.jackson.annotation.JsonProperty("nlist")
      private final java.lang.Long nlist;

      Params(Builder builder) {
        super(builder);
        this.efConstruction = builder.getEfConstruction();
        this.indexType = builder.getIndexType();
        this.m = builder.getM();
        this.nlist = builder.getNlist();
      }
    }

    @lombok.Getter
    @lombok.Setter
    @lombok.experimental.Accessors(chain = true)
    @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
      buildMethodName = "buildWithoutValidation",
      withPrefix = "set"
    )
    public static class Builder extends io.gandi.models.BaseModel.Builder {

      static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

      static {
        java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {};

        REQUIRED_FIELDS_GROUPS =
          java.util.Arrays
            .stream(requiredFieldsGroups)
            .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
            .collect(java.util.stream.Collectors.toSet());
      }

      @com.fasterxml.jackson.annotation.JsonProperty("fieldName")
      private java.lang.String fieldName;

      @com.fasterxml.jackson.annotation.JsonProperty("indexName")
      private java.lang.String indexName;

      @com.fasterxml.jackson.annotation.JsonProperty("metricType")
      private java.lang.String metricType;

      @com.fasterxml.jackson.annotation.JsonProperty("params")
      private Collection.IndexParams.Params params;

      public Builder() {
        super(ValidationType.ALL_OF);
      }

      protected Builder(BaseModel.Builder.ValidationType validationType) {
        super(validationType);
      }

      public Collection.IndexParams build() {
        String validateMsg = validate();

        if (validateMsg != null) {
          throw new io.gandi.exceptions.ApiException(validateMsg);
        }

        return buildWithoutValidation();
      }

      public Collection.IndexParams buildWithoutValidation() {
        return new Collection.IndexParams(this);
      }

      @Override
      protected java.util.Set<String> getNonNullInstanceFieldNames() {
        // Introspect the class to get a list of all declared fields.
        return java.util.Arrays
          .asList(this.getClass().getDeclaredFields())
          .stream()
          .filter(field -> {
            try {
              // Filter fields that are non-static and have values that are not null.
              return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
            } catch (IllegalArgumentException | IllegalAccessException e) {
              // This should never happen...

              throw new io.gandi.exceptions.ApiException(
                "Unexpected exception thrown while accessing instance fields.",
                e
              );
            }
          })
          .map(java.lang.reflect.Field::getName)
          .collect(java.util.stream.Collectors.toSet());
      }

      @Override
      protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
        return REQUIRED_FIELDS_GROUPS;
      }
    }

    @com.fasterxml.jackson.annotation.JsonProperty("fieldName")
    private final java.lang.String fieldName;

    @com.fasterxml.jackson.annotation.JsonProperty("indexName")
    private final java.lang.String indexName;

    @com.fasterxml.jackson.annotation.JsonProperty("metricType")
    private final java.lang.String metricType;

    @com.fasterxml.jackson.annotation.JsonProperty("params")
    private final Collection.IndexParams.Params params;

    IndexParams(Builder builder) {
      super(builder);
      this.fieldName = builder.getFieldName();
      this.indexName = builder.getIndexName();
      this.metricType = builder.getMetricType();
      this.params = builder.getParams();
    }
  }

  @lombok.Getter
  @lombok.EqualsAndHashCode(callSuper = false)
  @lombok.ToString
  @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
  @com.fasterxml.jackson.databind.annotation.JsonDeserialize(builder = Collection.Params.Builder.class)
  public static class Params extends io.gandi.models.BaseModel {

    @lombok.Getter
    @lombok.Setter
    @lombok.experimental.Accessors(chain = true)
    @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
      buildMethodName = "buildWithoutValidation",
      withPrefix = "set"
    )
    public static class Builder extends io.gandi.models.BaseModel.Builder {

      static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

      static {
        java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {};

        REQUIRED_FIELDS_GROUPS =
          java.util.Arrays
            .stream(requiredFieldsGroups)
            .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
            .collect(java.util.stream.Collectors.toSet());
      }

      @com.fasterxml.jackson.annotation.JsonProperty("consistencyLevel")
      private java.lang.Long consistencyLevel;

      @com.fasterxml.jackson.annotation.JsonProperty("enableDynamicField")
      private java.lang.Boolean enableDynamicField;

      @com.fasterxml.jackson.annotation.JsonProperty("max_length")
      private java.lang.Long maxLength;

      @com.fasterxml.jackson.annotation.JsonProperty("partitionsNum")
      private java.lang.Long partitionsNum;

      @com.fasterxml.jackson.annotation.JsonProperty("shardsNum")
      private java.lang.Long shardsNum;

      @com.fasterxml.jackson.annotation.JsonProperty("ttlSeconds")
      private java.lang.Long ttlSeconds;

      public Builder() {
        super(ValidationType.ALL_OF);
      }

      protected Builder(BaseModel.Builder.ValidationType validationType) {
        super(validationType);
      }

      public Collection.Params build() {
        String validateMsg = validate();

        if (validateMsg != null) {
          throw new io.gandi.exceptions.ApiException(validateMsg);
        }

        return buildWithoutValidation();
      }

      public Collection.Params buildWithoutValidation() {
        return new Collection.Params(this);
      }

      @Override
      protected java.util.Set<String> getNonNullInstanceFieldNames() {
        // Introspect the class to get a list of all declared fields.
        return java.util.Arrays
          .asList(this.getClass().getDeclaredFields())
          .stream()
          .filter(field -> {
            try {
              // Filter fields that are non-static and have values that are not null.
              return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
            } catch (IllegalArgumentException | IllegalAccessException e) {
              // This should never happen...

              throw new io.gandi.exceptions.ApiException(
                "Unexpected exception thrown while accessing instance fields.",
                e
              );
            }
          })
          .map(java.lang.reflect.Field::getName)
          .collect(java.util.stream.Collectors.toSet());
      }

      @Override
      protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
        return REQUIRED_FIELDS_GROUPS;
      }
    }

    @com.fasterxml.jackson.annotation.JsonProperty("consistencyLevel")
    private final java.lang.Long consistencyLevel;

    @com.fasterxml.jackson.annotation.JsonProperty("enableDynamicField")
    private final java.lang.Boolean enableDynamicField;

    @com.fasterxml.jackson.annotation.JsonProperty("max_length")
    private final java.lang.Long maxLength;

    @com.fasterxml.jackson.annotation.JsonProperty("partitionsNum")
    private final java.lang.Long partitionsNum;

    @com.fasterxml.jackson.annotation.JsonProperty("shardsNum")
    private final java.lang.Long shardsNum;

    @com.fasterxml.jackson.annotation.JsonProperty("ttlSeconds")
    private final java.lang.Long ttlSeconds;

    Params(Builder builder) {
      super(builder);
      this.consistencyLevel = builder.getConsistencyLevel();
      this.enableDynamicField = builder.getEnableDynamicField();
      this.maxLength = builder.getMaxLength();
      this.partitionsNum = builder.getPartitionsNum();
      this.shardsNum = builder.getShardsNum();
      this.ttlSeconds = builder.getTtlSeconds();
    }
  }

  @lombok.Getter
  @lombok.Setter
  @lombok.experimental.Accessors(chain = true)
  @com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder(
    buildMethodName = "buildWithoutValidation",
    withPrefix = "set"
  )
  public static class Builder extends io.gandi.models.BaseModel.Builder {

    static final java.util.Set<java.util.Set<String>> REQUIRED_FIELDS_GROUPS;

    static {
      java.lang.String[][] requiredFieldsGroups = new java.lang.String[][] {
        new java.lang.String[] { "collectionName" },
      };

      REQUIRED_FIELDS_GROUPS =
        java.util.Arrays
          .stream(requiredFieldsGroups)
          .map(group -> java.util.Arrays.stream(group).collect(java.util.stream.Collectors.toSet()))
          .collect(java.util.stream.Collectors.toSet());
    }

    @com.fasterxml.jackson.annotation.JsonProperty("autoID")
    private java.lang.String autoId;

    @com.fasterxml.jackson.annotation.JsonProperty("collectionName")
    private java.lang.String collectionName;

    @com.fasterxml.jackson.annotation.JsonProperty("dbName")
    private java.lang.String dbName;

    @com.fasterxml.jackson.annotation.JsonProperty("dimension")
    private java.lang.Long dimension;

    @com.fasterxml.jackson.annotation.JsonProperty("idType")
    private java.lang.String idType;

    @com.fasterxml.jackson.annotation.JsonProperty("indexParams")
    private java.util.List<Collection.IndexParams> indexParams;

    @com.fasterxml.jackson.annotation.JsonProperty("metricType")
    private java.lang.String metricType;

    @com.fasterxml.jackson.annotation.JsonProperty("params")
    private Collection.Params params;

    @com.fasterxml.jackson.annotation.JsonProperty("primaryFieldName")
    private java.lang.String primaryFieldName;

    @com.fasterxml.jackson.annotation.JsonProperty("schema")
    private Collection.Schema schema;

    @com.fasterxml.jackson.annotation.JsonProperty("vectorFieldName")
    private java.lang.String vectorFieldName;

    public Builder() {
      super(ValidationType.ALL_OF);
    }

    protected Builder(BaseModel.Builder.ValidationType validationType) {
      super(validationType);
    }

    public Collection build() {
      String validateMsg = validate();

      if (validateMsg != null) {
        throw new io.gandi.exceptions.ApiException(validateMsg);
      }

      return buildWithoutValidation();
    }

    public Collection buildWithoutValidation() {
      return new Collection(this);
    }

    @Override
    protected java.util.Set<String> getNonNullInstanceFieldNames() {
      // Introspect the class to get a list of all declared fields.
      return java.util.Arrays
        .stream(this.getClass().getDeclaredFields())
        .filter(field -> {
          try {
            // Filter fields that are non-static and have values that are not null.
            return (!java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.get(this) != null);
          } catch (IllegalArgumentException | IllegalAccessException e) {
            // This should never happen...

            throw new io.gandi.exceptions.ApiException(
              "Unexpected exception thrown while accessing instance fields.",
              e
            );
          }
        })
        .map(java.lang.reflect.Field::getName)
        .collect(java.util.stream.Collectors.toSet());
    }

    @Override
    protected java.util.Set<java.util.Set<String>> getRequiredFieldsGroups() {
      return REQUIRED_FIELDS_GROUPS;
    }
  }

  @com.fasterxml.jackson.annotation.JsonProperty("autoID")
  private final java.lang.String autoId;

  @com.fasterxml.jackson.annotation.JsonProperty("collectionName")
  private final java.lang.String collectionName;

  @com.fasterxml.jackson.annotation.JsonProperty("dbName")
  private final java.lang.String dbName;

  @com.fasterxml.jackson.annotation.JsonProperty("dimension")
  private final java.lang.Long dimension;

  @com.fasterxml.jackson.annotation.JsonProperty("idType")
  private final java.lang.String idType;

  @com.fasterxml.jackson.annotation.JsonProperty("indexParams")
  private final java.util.List<Collection.IndexParams> indexParams;

  @com.fasterxml.jackson.annotation.JsonProperty("metricType")
  private final java.lang.String metricType;

  @com.fasterxml.jackson.annotation.JsonProperty("params")
  private final Collection.Params params;

  @com.fasterxml.jackson.annotation.JsonProperty("primaryFieldName")
  private final java.lang.String primaryFieldName;

  @com.fasterxml.jackson.annotation.JsonProperty("schema")
  private final Collection.Schema schema;

  @com.fasterxml.jackson.annotation.JsonProperty("vectorFieldName")
  private final java.lang.String vectorFieldName;

  Collection(Builder builder) {
    super(builder);
    this.autoId = builder.getAutoId();
    this.collectionName = builder.getCollectionName();
    this.dbName = builder.getDbName();
    this.dimension = builder.getDimension();
    this.idType = builder.getIdType();
    this.indexParams = builder.getIndexParams();
    this.metricType = builder.getMetricType();
    this.params = builder.getParams();
    this.primaryFieldName = builder.getPrimaryFieldName();
    this.schema = builder.getSchema();
    this.vectorFieldName = builder.getVectorFieldName();
  }
}
