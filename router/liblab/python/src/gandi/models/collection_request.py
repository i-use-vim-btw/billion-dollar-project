# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel


@JsonMap({})
class ElementTypeParams(BaseModel):
    """ElementTypeParams

    :param max_length: max_length, defaults to None
    :type max_length: int, optional
    :param dim: dim, defaults to None
    :type dim: int, optional
    :param max_capacity: max_capacity, defaults to None
    :type max_capacity: int, optional
    """

    def __init__(
        self, max_length: int = None, dim: int = None, max_capacity: int = None
    ):
        if max_length is not None:
            self.max_length = max_length
        if dim is not None:
            self.dim = dim
        if max_capacity is not None:
            self.max_capacity = max_capacity


@JsonMap(
    {
        "field_name": "fieldName",
        "data_type": "dataType",
        "element_data_type": "elementDataType",
        "is_primary": "isPrimary",
        "is_partition_key": "isPartitionKey",
        "element_type_params": "elementTypeParams",
    }
)
class Fields(BaseModel):
    """Fields

    :param field_name: field_name, defaults to None
    :type field_name: str, optional
    :param data_type: data_type, defaults to None
    :type data_type: str, optional
    :param element_data_type: element_data_type, defaults to None
    :type element_data_type: str, optional
    :param is_primary: is_primary, defaults to None
    :type is_primary: bool, optional
    :param is_partition_key: is_partition_key, defaults to None
    :type is_partition_key: bool, optional
    :param element_type_params: element_type_params, defaults to None
    :type element_type_params: ElementTypeParams, optional
    """

    def __init__(
        self,
        field_name: str = None,
        data_type: str = None,
        element_data_type: str = None,
        is_primary: bool = None,
        is_partition_key: bool = None,
        element_type_params: ElementTypeParams = None,
    ):
        if field_name is not None:
            self.field_name = field_name
        if data_type is not None:
            self.data_type = data_type
        if element_data_type is not None:
            self.element_data_type = element_data_type
        if is_primary is not None:
            self.is_primary = is_primary
        if is_partition_key is not None:
            self.is_partition_key = is_partition_key
        if element_type_params is not None:
            self.element_type_params = self._define_object(
                element_type_params, ElementTypeParams
            )


@JsonMap({"auto_id": "autoID", "enable_dynamic_field": "enableDynamicField"})
class Schema(BaseModel):
    """Schema

    :param auto_id: auto_id, defaults to None
    :type auto_id: str, optional
    :param enable_dynamic_field: enable_dynamic_field, defaults to None
    :type enable_dynamic_field: str, optional
    :param fields: fields, defaults to None
    :type fields: List[Fields], optional
    """

    def __init__(
        self,
        auto_id: str = None,
        enable_dynamic_field: str = None,
        fields: List[Fields] = None,
    ):
        if auto_id is not None:
            self.auto_id = auto_id
        if enable_dynamic_field is not None:
            self.enable_dynamic_field = enable_dynamic_field
        if fields is not None:
            self.fields = self._define_list(fields, Fields)


@JsonMap({"m": "M", "ef_construction": "efConstruction"})
class IndexParamsParams1(BaseModel):
    """IndexParamsParams1

    :param index_type: index_type, defaults to None
    :type index_type: str, optional
    :param m: m, defaults to None
    :type m: int, optional
    :param ef_construction: ef_construction, defaults to None
    :type ef_construction: int, optional
    :param nlist: nlist, defaults to None
    :type nlist: int, optional
    """

    def __init__(
        self,
        index_type: str = None,
        m: int = None,
        ef_construction: int = None,
        nlist: int = None,
    ):
        if index_type is not None:
            self.index_type = index_type
        if m is not None:
            self.m = m
        if ef_construction is not None:
            self.ef_construction = ef_construction
        if nlist is not None:
            self.nlist = nlist


@JsonMap(
    {"metric_type": "metricType", "field_name": "fieldName", "index_name": "indexName"}
)
class CollectionRequestIndexParams(BaseModel):
    """CollectionRequestIndexParams

    :param metric_type: metric_type, defaults to None
    :type metric_type: str, optional
    :param field_name: field_name, defaults to None
    :type field_name: str, optional
    :param index_name: index_name, defaults to None
    :type index_name: str, optional
    :param params: params, defaults to None
    :type params: IndexParamsParams1, optional
    """

    def __init__(
        self,
        metric_type: str = None,
        field_name: str = None,
        index_name: str = None,
        params: IndexParamsParams1 = None,
    ):
        if metric_type is not None:
            self.metric_type = metric_type
        if field_name is not None:
            self.field_name = field_name
        if index_name is not None:
            self.index_name = index_name
        if params is not None:
            self.params = self._define_object(params, IndexParamsParams1)


@JsonMap(
    {
        "enable_dynamic_field": "enableDynamicField",
        "shards_num": "shardsNum",
        "consistency_level": "consistencyLevel",
        "partitions_num": "partitionsNum",
        "ttl_seconds": "ttlSeconds",
    }
)
class CollectionRequestParams(BaseModel):
    """CollectionRequestParams

    :param max_length: max_length, defaults to None
    :type max_length: int, optional
    :param enable_dynamic_field: enable_dynamic_field, defaults to None
    :type enable_dynamic_field: bool, optional
    :param shards_num: shards_num, defaults to None
    :type shards_num: int, optional
    :param consistency_level: consistency_level, defaults to None
    :type consistency_level: int, optional
    :param partitions_num: partitions_num, defaults to None
    :type partitions_num: int, optional
    :param ttl_seconds: ttl_seconds, defaults to None
    :type ttl_seconds: int, optional
    """

    def __init__(
        self,
        max_length: int = None,
        enable_dynamic_field: bool = None,
        shards_num: int = None,
        consistency_level: int = None,
        partitions_num: int = None,
        ttl_seconds: int = None,
    ):
        if max_length is not None:
            self.max_length = max_length
        if enable_dynamic_field is not None:
            self.enable_dynamic_field = enable_dynamic_field
        if shards_num is not None:
            self.shards_num = shards_num
        if consistency_level is not None:
            self.consistency_level = consistency_level
        if partitions_num is not None:
            self.partitions_num = partitions_num
        if ttl_seconds is not None:
            self.ttl_seconds = ttl_seconds


@JsonMap(
    {
        "db_name": "dbName",
        "collection_name": "collectionName",
        "metric_type": "metricType",
        "id_type": "idType",
        "auto_id": "autoID",
        "primary_field_name": "primaryFieldName",
        "vector_field_name": "vectorFieldName",
        "index_params": "indexParams",
    }
)
class CollectionRequest(BaseModel):
    """CollectionRequest

    :param db_name: db_name, defaults to None
    :type db_name: str, optional
    :param collection_name: collection_name
    :type collection_name: str
    :param dimension: dimension, defaults to None
    :type dimension: int, optional
    :param metric_type: metric_type, defaults to None
    :type metric_type: str, optional
    :param id_type: id_type, defaults to None
    :type id_type: str, optional
    :param auto_id: auto_id, defaults to None
    :type auto_id: str, optional
    :param primary_field_name: primary_field_name, defaults to None
    :type primary_field_name: str, optional
    :param vector_field_name: vector_field_name, defaults to None
    :type vector_field_name: str, optional
    :param schema: schema, defaults to None
    :type schema: Schema, optional
    :param index_params: index_params, defaults to None
    :type index_params: List[CollectionRequestIndexParams], optional
    :param params: params, defaults to None
    :type params: CollectionRequestParams, optional
    """

    def __init__(
        self,
        collection_name: str,
        host: str,
        db_name: str = None,
        dimension: int = None,
        metric_type: str = None,
        id_type: str = None,
        auto_id: str = None,
        primary_field_name: str = None,
        vector_field_name: str = None,
        schema: Schema = None,
        index_params: List[CollectionRequestIndexParams] = None,
        params: CollectionRequestParams = None,
    ):
        if db_name is not None:
            self.db_name = db_name
        self.collection_name = collection_name
        if dimension is not None:
            self.dimension = dimension
        if metric_type is not None:
            self.metric_type = metric_type
        if id_type is not None:
            self.id_type = id_type
        if auto_id is not None:
            self.auto_id = auto_id
        if primary_field_name is not None:
            self.primary_field_name = primary_field_name
        if vector_field_name is not None:
            self.vector_field_name = vector_field_name
        if schema is not None:
            self.schema = self._define_object(schema, Schema)
        if index_params is not None:
            self.index_params = self._define_list(
                index_params, CollectionRequestIndexParams
            )
        if params is not None:
            self.params = self._define_object(params, CollectionRequestParams)
        if host is not None:
            self.host = host
