# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.create_collections_rename_request import CreateCollectionsRenameRequest
from ..models.create_collections_release_request import CreateCollectionsReleaseRequest
from ..models.create_collections_load_request import CreateCollectionsLoadRequest
from ..models.create_collections_list_request import CreateCollectionsListRequest
from ..models.create_collections_has_request import CreateCollectionsHasRequest
from ..models.create_collections_get_stats_request import (
    CreateCollectionsGetStatsRequest,
)
from ..models.create_collections_get_load_state_request import (
    CreateCollectionsGetLoadStateRequest,
)
from ..models.create_collections_drop_request import CreateCollectionsDropRequest
from ..models.create_collections_describe_request import (
    CreateCollectionsDescribeRequest,
)
from ..models.collection_request import CollectionRequest


class CollectionsService(BaseService):

    @cast_models
    def create_collections_create(self, request_body: CollectionRequest):
        """This operation creates a collection in a specified cluster.

        :param request_body: The request body.
        :type request_body: CollectionRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/create", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_collections_describe(
        self, request_body: CreateCollectionsDescribeRequest
    ):
        """Returns the details of a collection.

        :param request_body: The request body.
        :type request_body: CreateCollectionsDescribeRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateCollectionsDescribeRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/describe", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_collections_drop(self, request_body: CreateCollectionsDropRequest):
        """This operation drops the current collection and all data within the collection.

        :param request_body: The request body.
        :type request_body: CreateCollectionsDropRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateCollectionsDropRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/collections/drop", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_collections_get_load_state(
        self, request_body: CreateCollectionsGetLoadStateRequest
    ):
        """Returns the load state of a specific collection.

        :param request_body: The request body.
        :type request_body: CreateCollectionsGetLoadStateRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateCollectionsGetLoadStateRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/get_load_state",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_collections_get_stats(
        self, request_body: CreateCollectionsGetStatsRequest
    ):
        """This operation gets the number of entities in a collection.

        :param request_body: The request body.
        :type request_body: CreateCollectionsGetStatsRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateCollectionsGetStatsRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/get_stats", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_collections_has(self, request_body: CreateCollectionsHasRequest):
        """Checks if a collection exists in the database.

        :param request_body: The request body.
        :type request_body: CreateCollectionsHasRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateCollectionsHasRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/collections/has", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_collections_list(self, request_body: CreateCollectionsListRequest):
        """Returns a list of all collections in the specified database.

        :param request_body: The request body.
        :type request_body: CreateCollectionsListRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateCollectionsListRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/collections/list", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_collections_load(self, request_body: CreateCollectionsLoadRequest):
        """Loads a collection into memory.

        :param request_body: The request body.
        :type request_body: CreateCollectionsLoadRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateCollectionsLoadRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/collections/load", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_collections_release(self, request_body: CreateCollectionsReleaseRequest):
        """Releases a collection from memory.

        :param request_body: The request body.
        :type request_body: CreateCollectionsReleaseRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateCollectionsReleaseRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/release", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_collections_rename(self, request_body: CreateCollectionsRenameRequest):
        """This operation renames an existing collection and optionally moves the collection to a new database.

        :param request_body: The request body.
        :type request_body: CreateCollectionsRenameRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateCollectionsRenameRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/rename", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response
