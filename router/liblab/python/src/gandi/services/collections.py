# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.collections_rename_request import CollectionRenameRequest
from ..models.collections_release_request import CollectionReleaseRequest
from ..models.collections_load_request import CollectionLoadRequest
from ..models.collections_list_request import CollectionListRequest
from ..models.collections_has_request import CollectionHasRequest
from ..models.collections_get_stats_request import (
    CollectionGetStatsRequest,
)
from ..models.collections_get_load_state_request import (
    CollectionGetLoadStateRequest,
)
from ..models.collections_drop_request import CollectionDropRequest
from ..models.collection_describe_request import (
    CollectionDescribeRequest,
)
from ..models.collection import Collection


class CollectionsService(BaseService):

    @cast_models
    def create(self, request_body: Collection):
        """This operation creates a collection in a specified cluster.

        :param request_body: The request body.
        :type request_body: Collection
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(Collection).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/create", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def describe(self, request_body: CollectionDescribeRequest):
        """Returns the details of a collection.

        :param request_body: The request body.
        :type request_body: CollectionDescribeRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionDescribeRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/describe", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def drop(self, request_body: CollectionDropRequest):
        """This operation drops the current collection and all data within the collection.

        :param request_body: The request body.
        :type request_body: CollectionDropRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionDropRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/collections/drop", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def get_load_state(self, request_body: CollectionGetLoadStateRequest):
        """Returns the load state of a specific collection.

        :param request_body: The request body.
        :type request_body: CollectionGetLoadStateRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionGetLoadStateRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/get_load_state",
                self.get_default_headers(),
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def get_stats(self, request_body: CollectionGetStatsRequest):
        """This operation gets the number of entities in a collection.

        :param request_body: The request body.
        :type request_body: CollectionGetStatsRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionGetStatsRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/get_stats", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def has(self, request_body: CollectionHasRequest):
        """Checks if a collection exists in the database.

        :param request_body: The request body.
        :type request_body: CollectionHasRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionHasRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/collections/has", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list(self, request_body: CollectionListRequest):
        """Returns a list of all collections in the specified database.

        :param request_body: The request body.
        :type request_body: CollectionListRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionListRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/collections/list", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def load(self, request_body: CollectionLoadRequest):
        """Loads a collection into memory.

        :param request_body: The request body.
        :type request_body: CollectionLoadRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionLoadRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/collections/load", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def release(self, request_body: CollectionReleaseRequest):
        """Releases a collection from memory.

        :param request_body: The request body.
        :type request_body: CollectionReleaseRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionReleaseRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/release", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def rename(self, request_body: CollectionRenameRequest):
        """This operation renames an existing collection and optionally moves the collection to a new database.

        :param request_body: The request body.
        :type request_body: CollectionRenameRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CollectionRenameRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/collections/rename", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response
