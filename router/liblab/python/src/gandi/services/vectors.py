# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.vectors_upsert_request import VectorsUpsertRequest
from ..models.vectors_search_request import VectorsSearchRequest
from ..models.vectors_query_request import VectorsQueryRequest
from ..models.vectors_insert_request import VectorsInsertRequest
from ..models.vectors_get_request import VectorsGetRequest
from ..models.vectors_delete_request import VectorsDeleteRequest
from ..models.vectors_hybrid_search_request import VectorsHybridSearchRequest


class VectorsService(BaseService):

    @cast_models
    def delete(self, request_body: VectorsDeleteRequest):
        """This operation deletes entities by their IDs or with a boolean expression.

        :param request_body: The request body.
        :type request_body: VectorsDeleteRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(VectorsDeleteRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/delete", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def get(self, request_body: VectorsGetRequest):
        """This operation gets vectors by their IDs.

        :param request_body: The request body.
        :type request_body: VectorsGetRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(VectorsGetRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/get", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def insert(self, request_body: VectorsInsertRequest):
        """This operation inserts vectors into a specified collection.

        :param request_body: The request body.
        :type request_body: VectorsInsertRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(VectorsInsertRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/insert", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def query(self, request_body: VectorsQueryRequest):
        """This operation queries vectors in a specified collection.

        :param request_body: The request body.
        :type request_body: VectorsQueryRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(VectorsQueryRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/query", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def search(self, request_body: VectorsSearchRequest):
        """This operation searches vectors in a specified collection.

        :param request_body: The request body.
        :type request_body: VectorsSearchRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(VectorsSearchRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/search", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def hybrid_search(self, request_body: VectorsHybridSearchRequest):
        """This operation searches vectors in a specified collection.

        :param request_body: The request body.
        :type request_body: VectorsHybridSearchRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(VectorsHybridSearchRequest).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/vectors/hybrid_search", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def upsert(self, request_body: VectorsUpsertRequest):
        """This operation upserts vectors into a specified collection.

        :param request_body: The request body.
        :type request_body: VectorsUpsertRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(VectorsUpsertRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/upsert", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response
