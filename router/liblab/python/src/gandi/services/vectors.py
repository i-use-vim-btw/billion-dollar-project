# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.create_vectors_upsert_request import CreateVectorsUpsertRequest
from ..models.create_vectors_search_request import CreateVectorsSearchRequest
from ..models.create_vectors_query_request import CreateVectorsQueryRequest
from ..models.create_vectors_insert_request import CreateVectorsInsertRequest
from ..models.create_vectors_get_request import CreateVectorsGetRequest
from ..models.create_vectors_delete_request import CreateVectorsDeleteRequest


class VectorsService(BaseService):

    @cast_models
    def create_vectors_delete(self, request_body: CreateVectorsDeleteRequest):
        """This operation deletes entities by their IDs or with a boolean expression.

        :param request_body: The request body.
        :type request_body: CreateVectorsDeleteRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateVectorsDeleteRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/delete", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_vectors_get(self, request_body: CreateVectorsGetRequest):
        """This operation gets vectors by their IDs.

        :param request_body: The request body.
        :type request_body: CreateVectorsGetRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateVectorsGetRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/get", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_vectors_insert(self, request_body: CreateVectorsInsertRequest):
        """This operation inserts vectors into a specified collection.

        :param request_body: The request body.
        :type request_body: CreateVectorsInsertRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateVectorsInsertRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/insert", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_vectors_query(self, request_body: CreateVectorsQueryRequest):
        """This operation queries vectors in a specified collection.

        :param request_body: The request body.
        :type request_body: CreateVectorsQueryRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateVectorsQueryRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/query", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_vectors_search(self, request_body: CreateVectorsSearchRequest):
        """This operation searches vectors in a specified collection.

        :param request_body: The request body.
        :type request_body: CreateVectorsSearchRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateVectorsSearchRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/search", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def create_vectors_upsert(self, request_body: CreateVectorsUpsertRequest):
        """This operation upserts vectors into a specified collection.

        :param request_body: The request body.
        :type request_body: CreateVectorsUpsertRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(CreateVectorsUpsertRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/vectors/upsert", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response
