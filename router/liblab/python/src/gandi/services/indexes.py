# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.index_request import IndexRequest
from ..models.indexes_list_request import IndexListRequest
from ..models.indexes_drop_request import IndexDropRequest
from ..models.indexes_describe_request import IndexDescribeRequest


class IndexesService(BaseService):

    @cast_models
    def create(self, request_body: IndexRequest):
        """This creates a named index for a target field, which can either be a vector field or a scalar field.

        :param request_body: The request body.
        :type request_body: IndexRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(IndexRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/indexes/create", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def describe(self, request_body: IndexDescribeRequest):
        """Returns the details of an index.

        :param request_body: The request body.
        :type request_body: IndexDescribeRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(IndexDescribeRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/indexes/describe", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def drop(self, request_body: IndexDropRequest):
        """This operation drops index from a specified collection.

        :param request_body: The request body.
        :type request_body: IndexDropRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(IndexDropRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/indexes/drop", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def list(self, request_body: IndexListRequest):
        """Returns a list of all indexes in the specified collection.

        :param request_body: The request body.
        :type request_body: IndexListRequest
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(IndexListRequest).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/indexes/list", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response
